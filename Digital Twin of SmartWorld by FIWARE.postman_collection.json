{
	"info": {
		"_postman_id": "8c105dee-70ba-410d-8383-04880586ac04",
		"name": "Digital Twin of SmartWorld by FIWARE",
		"description": "[![NGSI LD](https://img.shields.io/badge/NGSI-LD-d6604d.svg)](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\n[![JSON LD](https://img.shields.io/badge/JSON--LD-1.1-f06f38.svg)](https://w3c.github.io/json-ld-syntax/)\n[![UltraLight 2.0](https://img.shields.io/badge/Payload-Ultralight-27ae60.svg)](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n\n\nThis **NGSI-LD** tutorial introduces the concept of an **IoT Agent** and wires up the dummy\n[UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) IoT\ndevices created in the [previous tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors) so that measurements can be\nread and commands can be sent using\n[NGSI LD](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nrequests sent to an NGSI-LD compliant context broker such as the\n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/).\n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.IoT-Agent/icon/GitHub-Mark-32px.png) [FIWARE 202: IoT Agents](https://github.com/Fiware/tutorials.IoT-Agent)\n\n# What is an IoT Agent?\n\n> \"Every act of communication is a miracle of translation.\"\n>\n> — Ken Liu (The Paper Menagerie and Other Stories)\n\nAn IoT Agent is a component that lets a group of devices send their data to and be managed from a Context Broker using\ntheir own native protocols. IoT Agents should also be able to deal with security aspects of the FIWARE platform\n(authentication and authorization of the channel) and provide other common services to the device programmer.\n\nAll **NGSI-LD**-based context brokers such as Scorpio, Stellio and Orion exclusively use the well-defined **NGSI-LD**\ninterface; this interface is also used when receiving instruction from third-parties and again when communicating with\n**NGSI-LD** aware components around the context broker itself. The north port of the IoT Agent is one such component\nwhich can communicate using **NGSI-LD** and the IoT Agent then translates the result so that all interactions beneath\nthis port occur using the **native protocol** of the attached devices.\n\nIn effect, this brings a standard interface to all IoT interactions at the context information management level. Each\ngroup of IoT devices are able to use their own proprietary protocols and disparate transport mechanisms under the hood\nwhilst the associated IoT Agent offers a facade pattern to handle this complexity.\n\nIoT Agents already exist or are in development for many IoT communication protocols and data models. Examples include\nthe following:\n\n-   [IoTAgent-JSON](https://fiware-iotagent-json.readthedocs.io/en/latest/) - a bridge between HTTP/MQTT messaging (with\n    a JSON payload) and NGSI-LD\n-   [IoTAgent-LWM2M](https://fiware-iotagent-lwm2m.readthedocs.io/en/latest) - a bridge between the\n    [Lightweight M2M](https://www.omaspecworks.org/what-is-oma-specworks/iot/lightweight-m2m-lwm2m/) protocol and\n    NGSI-LD\n-   [IoTAgent-UL](https://fiware-iotagent-ul.readthedocs.io/en/latest) - a bridge between HTTP/MQTT messaging (with an\n    UltraLight2.0 payload) and NGSI-LD\n-   [IoTagent-LoRaWAN](https://fiware-lorawan.readthedocs.io/en/latest) - a bridge between the\n    [LoRaWAN](https://www.thethingsnetwork.org/docs/lorawan/) protocol and NGSI-LD\n\n## Southbound Traffic (Commands)\n\nHTTP requests generated by the Orion Context Broker and passed downwards towards an IoT device (via an IoT agent) are\nknown as southbound traffic. Southbound traffic consists of **commands** made to actuator devices which alter the state\nof the real world by their actions.\n\nFor example to switch on a real-life UltraLight 2.0 **Irrigation System** the following interactions would occur:\n\n1.  An NGSI-LD PATCH request is sent to the **Context broker** to update the current context of **Irrigation System**\n\n-   this is effectively an indirect request invoke the `on` command of the **Irrigation System**\n\n2.  The **Context Broker** finds the entity within the context and notes that the context provision for this attribute\n    has been delegated to the IoT Agent\n3.  Using the standard forwarding mechanism, the **Context broker** duplicates the PATCH request and forwards it to the\n    North Port of the **IoT Agent** to invoke the command\n4.  The **IoT Agent** receives this Southbound request and converts it to UltraLight 2.0 syntax and passes it on to the\n    **Irrigation System**\n5.  The **Irrigation System** switches on the water sprinkler and returns the result of the command to the **IoT Agent**\n    in UltraLight 2.0 syntax\n6.  The **IoT Agent** receives this Northbound request, interprets it and passes the result of the interaction into the\n    context by making an NGSI-LD request to the **Context Broker**.\n7.  The **Context Broker** receives this Northbound request and updates the context with the result of the command.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/command-swimlane.png)\n\n-   Requests between **User** and **Context Broker** use NGSI-LD\n-   Requests between **Context Broker** and **IoT Agent** use NGSI-LD\n-   Requests between **IoT Agent** and **IoT Device** use native protocols\n-   Requests between **IoT Device** and **IoT Agent** use native protocols\n-   Requests between **IoT Agent** and **Context Broker** use NGSI-LD\n\n## Northbound Traffic (Measurements)\n\nRequests generated from an IoT device and passed back upwards towards the Context Broker (via an IoT agent) are known as\nnorthbound traffic. Northbound traffic consists of **measurements** made by sensor devices and relays the state of the\nreal world into the context data of the system.\n\nFor example for a real-life **Soil Sensor** to send a humidity reading, the following interactions would occur:\n\n1.  A **Soil Sensor** makes a measurement and passes the result to the **IoT Agent**\n2.  The **IoT Agent** receives this Northbound request, converts the result from UltraLight syntax and passes the result\n    of the interaction into the context by making an NGSI-LD request to the **Context Broker**.\n3.  The **Context Broker** receives this Northbound request and updates the context with the result of the measurement.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/measurement-swimlane.png)\n\n-   Requests between **IoT-Device** and **IoT-Agent** use native protocols\n-   Requests between **IoT-Agent** and **Context-Broker** use NGSI-LD\n\n> **Note** Other more complex interactions are also possible, but this overview is sufficient to understand the basic\n> principles of an IoT Agent.\n\n## Common Functionality\n\nAs can be seen from the previous sections, although each IoT Agent will be unique since they interpret different\nprotocols, there will a large degree of similarity between IoT agents.\n\n-   Offering a standard endpoint to listen to device updates\n-   Offering a standard endpoint to listen to context data updates\n-   Holding a list of devices and mapping context data attributes to device syntax\n-   Security Authorization\n\nThis base functionality has been abstracted out into a common\n[IoT Agent framework library](https://iotagent-node-lib.readthedocs.io/)\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy agricultural IoT devices have been created, which will be attached\nto the context broker. Details of the architecture and protocol used can be found in the\n[IoT Sensors tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD) The state of each device can be\nseen on the UltraLight device monitor web page found at: `http://localhost:3000/device/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.IoT-Agent/img/farm-devices.png)\n\n# Architecture\n\nThis application builds on the components created in\n[previous tutorials](https://github.com/FIWARE/tutorials.Subscriptions/). It will make use of two FIWARE components - an\nNGSI-LD Context Broker such as [Orion](https://fiware-orion.readthedocs.io/en/latest/) and the\n[IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/). Usage of the Context Broker is\nsufficient for an application to qualify as _“Powered by FIWARE”_. Both the Orion Context Broker and the IoT Agent rely\non open source [MongoDB](https://www.mongodb.com/) technology to keep persistence of the information they hold. We will\nalso be using the dummy IoT devices created in the [previous tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors/)\n\nTherefore the overall architecture will consist of the following elements:\n\n-   The [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using\n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n-   The FIWARE [IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/) which will receive\n    southbound requests using\n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n    and convert them to\n    [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n    commands for the devices\n-   The underlying [MongoDB](https://www.mongodb.com/) database :\n    -   Used by the **Orion Context Broker** to hold context data information such as data entities, subscriptions and\n        registrations\n    -   Used by the **IoT Agent** to hold device information such as device URLs and Keys\n-   The **Tutorial Application** does the following:\n    -   Offers static `@context` files defining the context entities within the system.\n    -   Acts as set of dummy [agricultural IoT devices](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD)\n        using the\n        [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n        protocol running over HTTP.\n\nSince all interactions between the elements are initiated by HTTP requests, the entities can be containerized and run\nfrom exposed ports.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/architecture-ld.png)\n\nThe necessary configuration information for wiring up the IoT devices and the IoT Agent can be seen in the services\nsection of the associated `docker-compose.yml` file:\n\n## Dummy IoT Devices Configuration\n\n```yaml\ntutorial:\n    image: fiware/tutorials.ngsi-ld\n    hostname: iot-sensors\n    container_name: fiware-tutorial\n    networks:\n        - default\n    expose:\n        - \"3000\"\n        - \"3001\"\n    ports:\n        - \"3000:3000\"\n        - \"3001:3001\"\n    environment:\n        - \"DEBUG=tutorial:*\"\n        - \"PORT=3000\"\n        - \"IOTA_HTTP_HOST=iot-agent\"\n        - \"IOTA_HTTP_PORT=7896\"\n        - \"DUMMY_DEVICES_PORT=3001\"\n        - \"DUMMY_DEVICES_API_KEY=4jggokgpepnvsb2uv4s40d59ov\"\n        - \"DUMMY_DEVICES_TRANSPORT=HTTP\"\n        - \"IOTA_JSON_LD_CONTEXT=http://context:3000/data-models/ngsi-context.jsonld\"\n```\n\nThe `tutorial` container is listening on two ports:\n\n-   Port `3000` is exposed so we can see the web page displaying the Dummy IoT devices.\n-   Port `3001` is exposed purely for tutorial access - so that cUrl or Postman can make UltraLight commands without\n    being part of the same network.\n\nThe `tutorial` container is driven by environment variables as shown:\n\n| Key                     | Value                                                 | Description                                                                                                                               |\n| ----------------------- | ----------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| DEBUG                   | `tutorial:*`                                          | Debug flag used for logging                                                                                                               |\n| WEB_APP_PORT            | `3000`                                                | Port used by web-app which displays the dummy device data                                                                                 |\n| IOTA_HTTP_HOST          | `iot-agent`                                           | The hostname of the IoT Agent for UltraLight 2.0 - see below                                                                              |\n| IOTA_HTTP_PORT          | `7896`                                                | The port that the IoT Agent for UltraLight 2.0 will be listening on. `7896` is a common default for UltraLight over HTTP                  |\n| DUMMY_DEVICES_PORT      | `3001`                                                | Port used by the dummy IoT devices to receive commands                                                                                    |\n| DUMMY_DEVICES_API_KEY   | `4jggokgpepnvsb2uv4s40d59ov`                          | Random security key used for UltraLight interactions - used to ensure the integrity of interactions between the devices and the IoT Agent |\n| DUMMY_DEVICES_TRANSPORT | `HTTP`                                                | The transport protocol used by the dummy IoT devices                                                                                      |\n| IOTA_JSON_LD_CONTEXT    | `http://context:3000/data-models/ngsi-context.jsonld` | The location of the `@context` file used to define the device data models                                                                 |\n\nThe other `tutorial` container configuration values described in the YAML file are not used in this tutorial.\n\n## IoT Agent for UltraLight 2.0 Configuration\n\nThe [IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/) can be instantiated within a\nDocker container. An official Docker image is available from [Docker Hub](https://hub.docker.com/r/fiware/iotagent-ul/)\ntagged `fiware/iotagent-ul`. The necessary configuration can be seen below:\n\n```yaml\niot-agent:\n    image: fiware/iotagent-ul:latest\n    hostname: iot-agent\n    container_name: fiware-iot-agent\n    depends_on:\n        - mongo-db\n    networks:\n        - default\n    expose:\n        - \"4041\"\n        - \"7896\"\n    ports:\n        - \"4041:4041\"\n        - \"7896:7896\"\n    environment:\n        - IOTA_CB_HOST=orion\n        - IOTA_CB_PORT=1026\n        - IOTA_NORTH_PORT=4041\n        - IOTA_REGISTRY_TYPE=mongodb\n        - IOTA_LOG_LEVEL=DEBUG\n        - IOTA_TIMESTAMP=true\n        - IOTA_CB_NGSI_VERSION=ld\n        - IOTA_AUTOCAST=true\n        - IOTA_MONGO_HOST=mongo-db\n        - IOTA_MONGO_PORT=27017\n        - IOTA_MONGO_DB=iotagentul\n        - IOTA_HTTP_PORT=7896\n        - IOTA_PROVIDER_URL=http://iot-agent:4041\n        - IOTA_JSON_LD_CONTEXT=http://context:3000/data-models/ngsi-context.jsonld\n        - IOTA_FALLBACK_TENANT=openiot\n```\n\nThe `iot-agent` container relies on the precence of the Orion Context Broker and uses a MongoDB database to hold device\ninformation such as device URLs and Keys. The container is listening on two ports:\n\n-   Port `7896` is exposed to receive Ultralight measurements over HTTP from the Dummy IoT devices\n-   Port `4041` is exposed purely for tutorial access - so that cUrl or Postman can make provisioning commands without\n    being part of the same network.\n\nThe `iot-agent` container is driven by environment variables as shown:\n\n| Key                  | Value                                                 | Description                                                                                                                                           |\n| -------------------- | ----------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| IOTA_CB_HOST         | `orion`                                               | Hostname of the context broker to update context                                                                                                      |\n| IOTA_CB_PORT         | `1026`                                                | Port that context broker listens on to update context                                                                                                 |\n| IOTA_NORTH_PORT      | `4041`                                                | Port used for Configuring the IoT Agent and receiving context updates from the context broker                                                         |\n| IOTA_REGISTRY_TYPE   | `mongodb`                                             | Whether to hold IoT device info in memory or in a database                                                                                            |\n| IOTA_LOG_LEVEL       | `DEBUG`                                               | The log level of the IoT Agent                                                                                                                        |\n| IOTA_TIMESTAMP       | `true`                                                | Whether to supply timestamp information with each measurement received from attached devices                                                          |\n| IOTA_CB_NGSI_VERSION | `LD`                                                  | Whether to supply use NGSI-LD when sending updates for active attributes                                                                              |\n| IOTA_AUTOCAST        | `true`                                                | Ensure Ultralight number values are read as numbers not strings                                                                                       |\n| IOTA_MONGO_HOST      | `context-db`                                          | The hostname of mongoDB - used for holding device information                                                                                         |\n| IOTA_MONGO_PORT      | `27017`                                               | The port mongoDB is listening on                                                                                                                      |\n| IOTA_MONGO_DB        | `iotagentul`                                          | The name of the database used in mongoDB                                                                                                              |\n| IOTA_HTTP_PORT       | `7896`                                                | The port where the IoT Agent listens for IoT device traffic over HTTP                                                                                 |\n| IOTA_PROVIDER_URL    | `http://iot-agent:4041`                               | URL passed to the Context Broker when commands are registered, used as a forwarding URL location when the Context Broker issues a command to a device |\n| IOTA_JSON_LD_CONTEXT | `http://context:3000/data-models/ngsi-context.jsonld` | The location of the `@context` file used to define the device data models                                                                             |\n| IOTA_FALLBACK_TENANT | `openiot`                                             | The tenant to use if no explicit tenant has been received from communications                                                                         |\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple all components will be run using [Docker](https://www.docker.com). **Docker** is a container\ntechnology which allows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Entity-Relationships/master/docker-compose.yml) is used\nconfigure the required services for the application. This means all container services can be brought up in a single\ncommand. Docker Compose is installed by default as part of Docker for Windows and Docker for Mac, however Linux users\nwill need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\nYou can check your current **Docker** and **Docker Compose** versions using the following commands:\n\n```console\ndocker-compose -v\ndocker version\n```\n\nPlease ensure that you are using Docker version 18.03 or higher and Docker Compose 1.21 or higher and upgrade if\nnecessary.\n\n## Cygwin\n\nWe will start up our services using a simple bash script. Windows users should download [cygwin](http://www.cygwin.com/)\nto provide a command-line functionality similar to a Linux distribution on Windows.\n\n# Start Up\n\nBefore you start you should ensure that you have obtained or built the necessary Docker images locally. Please clone the\nrepository and create the necessary images by running the commands as shown:\n\n```console\ngit clone https://github.com/FIWARE/tutorials.IoT-Agent.git\ncd tutorials.IoT-Agent\ngit checkout NGSI-LD\n\n./services create\n```\n\nThereafter, all services can be initialized from the command-line by running the\n[services](https://github.com/FIWARE/tutorials.IoT-Agent/blob/NGSI-LD/services) Bash script provided within the\nrepository:\n\n```console\ngit clone https://github.com/FIWARE/tutorials.IoT-Agent.git\ncd tutorials.IoT-Agent\ngit checkout NGSI-LD\n\n./services orion|scorpio\n```\n\n> :information_source: **Note:** If you want to clean up and start over again you can do so with the following command:\n>\n> ```console\n> ./services stop\n> ```\n\n# Provisioning an IoT Agent\n\nTo follow the tutorial correctly please ensure you have the device monitor page available in your browser and click on\nthe page to enable audio before you enter any cUrl commands. The device monitor displays the current state of an array\nof dummy devices using Ultralight 2.0 syntax\n\n#### Device Monitor\n\nThe device monitor can be found at: `http://localhost:3000/device/monitor`\n\n## Checking the IoT Agent Service Health\n\nYou can check if the IoT Agent is running by making an HTTP request to the exposed port:\n\n#### :one: Request:\n\n```console\ncurl -X GET \\\n  'http://localhost:4041/iot/about'\n```\n\nThe response will look similar to the following:\n\n```json\n{\n    \"libVersion\": \"2.12.0-next\",\n    \"port\": \"4041\",\n    \"baseRoot\": \"/\",\n    \"version\": \"1.13.0-next\"\n}\n```\n\n> **What if I get a `Failed to connect to localhost port 4041: Connection refused` Response?**\n>\n> If you get a `Connection refused` response, the IoT Agent cannot be found where expected for this tutorial - you will\n> need to substitute the URL and port in each cUrl command with the corrected IP address. All the cUrl commands tutorial\n> assume that the IoT Agent is available on `localhost:4041`.\n>\n> Try the following remedies:\n>\n> -   To check that the docker containers are running try the following:\n>\n> ```console\n> docker ps\n> ```\n>\n> You should see four containers running. If the IoT Agent is not running, you can restart the containers as necessary.\n> This command will also display open port information.\n>\n> -   If you have installed [`docker-machine`](https://docs.docker.com/machine/) and\n>     [Virtual Box](https://www.virtualbox.org/), the context broker, IoT Agent and Dummy Device docker containers may\n>     be running from another IP address - you will need to retrieve the virtual host IP as shown:\n>\n> ```console\n> curl -X GET \\\n>  'http://$(docker-machine ip default):4041/version'\n> ```\n>\n> Alternatively run all your curl commands from within the container network:\n>\n> ```console\n> docker run --network fiware_default --rm appropriate/curl -s \\\n>  -X GET 'http://iot-agent:4041/iot/about'\n> ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Check health",
			"item": [
				{
					"name": "Context Broker",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{orion}}/version/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"version",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "IoT Agent",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{iot-agent}}/iot/about",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"about"
							]
						}
					},
					"response": []
				},
				{
					"name": "@context",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3004/ngsi-context.jsonld",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3004",
							"path": [
								"ngsi-context.jsonld"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register Entities",
			"item": [
				{
					"name": "Register Service",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"services\": [\n        {\n            \"apikey\": \"idFZy8D9KzFko7db\",\n            \"cbroker\": \"http://orion:1026\",\n            \"entity_type\": \"Device\",\n            \"resource\": \"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/services",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services"
							]
						},
						"description": "Invoking group provision is always the first step in connecting devices since it is always necessary to supply an\nauthentication key with each measurement and the IoT Agent will not initially know which URL the context broker is\nresponding on.\n\nIt is also possible to set up default commands and attributes for all anonymous devices as well, but this is not done\nwithin this tutorial as we will be provisioning each device separately.\n\nThis example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices will be sending\nmessages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)\n\nIn the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate\nthemselves by including the token `4jggokgpepnvsb2uv4s40d59ov`. For an UltraLight IoT Agent this means devices will be\nsending GET or POST requests to:\n\n```\nhttp://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov\n```\n\nWhich should be familiar UltraLight 2.0 syntax from the\n[previous tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD).\n\nThe service group provisioning can also be used to define `attributes` mappings and common `static_attributes`. The\n`attributes` mappings define common aliases for anonymous incoming devices. For example the key `gps` can be defined to\nmap the `location` GeoProperty.\n\nWhen a measurement from an IoT device is received on the resource URL it needs to be interpreted and passed to the\ncontext broker. The `entity_type` attribute provides a default `type` for each device which has made a request (in this\ncase anonymous devices will be known as `Device` entities. Furthermore the location of the context broker (`cbroker`) is\nneeded, so that the IoT Agent can pass on any measurements received to the correct location. `cbroker` is an optional\nattribute - if it is not provided, the IoT Agent uses the context broker URL as defined in the configuration file,\nhowever it has been included here for completeness.\n"
					},
					"response": []
				},
				{
					"name": "Check Service",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{iot-agent}}/iot/services",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Moduls",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"urn:ngsi-ld:Building:Mobility_Hub\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"Mobility_Hub\"]\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:Building:Harbour\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"Harbour\"]\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:Building:Basis\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"Basis\"]\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:Building:Impress\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"Impress\"]\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:Building:KI_Marketplace\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"KI_Marketplace\"]\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:Building:Production_Claas\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"Production_Claas\"]\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:Building:Wind_Energy\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"Wind_Energy\"]\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:Building:Dokk1\",\n        \"type\": \"Building\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": [\"Dokk1\"]\n        }\n    }\n]\n"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/create",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"create"
							]
						},
						"description": "This example returns the data of all `Store` entities within the context data"
					},
					"response": []
				},
				{
					"name": "Register Harbour",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"ParkingSpot:Harbour:1\",\n            \"entity_name\": \"urn:ngsi-ld:ParkingSpot:Harbour:1\",\n            \"entity_type\": \"ParkingSpot\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": \"offStreet\"\n                },\n                {\n                    \"name\": \"refParkingSite\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Harbour\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"ParkingSpot:Harbour:2\",\n            \"entity_name\": \"urn:ngsi-ld:ParkingSpot:Harbour:2\",\n            \"entity_type\": \"ParkingSpot\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": \"offStreet\"\n                },\n                {\n                    \"name\": \"refParkingSite\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Harbour\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"ParkingSpot:Harbour:3\",\n            \"entity_name\": \"urn:ngsi-ld:ParkingSpot:Harbour:3\",\n            \"entity_type\": \"ParkingSpot\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": \"offStreet\"\n                },\n                {\n                    \"name\": \"refParkingSite\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Harbour\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Register Mobility_Hub",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"ParkingSpot:Mobility_Hub:1\",\n            \"entity_name\": \"urn:ngsi-ld:ParkingSpot:Mobility_Hub:1\",\n            \"entity_type\": \"ParkingSpot\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": \"offStreet\"\n                },\n                {\n                    \"name\": \"refParkingSite\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Mobility_Hub\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"ParkingSpot:Mobility_Hub:2\",\n            \"entity_name\": \"urn:ngsi-ld:ParkingSpot:Mobility_Hub:2\",\n            \"entity_type\": \"ParkingSpot\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": \"offStreet\"\n                },\n                {\n                    \"name\": \"refParkingSite\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Mobility_Hub\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"ParkingSpot:Mobility_Hub:3\",\n            \"entity_name\": \"urn:ngsi-ld:ParkingSpot:Mobility_Hub:3\",\n            \"entity_type\": \"ParkingSpot\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": \"offStreet\"\n                },\n                {\n                    \"name\": \"refParkingSite\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Mobility_Hub\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"ParkingSpot:Mobility_Hub:4\",\n            \"entity_name\": \"urn:ngsi-ld:ParkingSpot:Mobility_Hub:4\",\n            \"entity_type\": \"ParkingSpot\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": \"offStreet\"\n                },\n                {\n                    \"name\": \"refParkingSite\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Mobility_Hub\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"electricVehicleChargingStation001\",\n            \"entity_name\": \"urn:ngsi-ld:Device:electricVehicleChargingStation001\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"distanceUltrasonic\",\n                    \"name\": \"distanceUltrasonic\",\n                    \"type\": \"Number\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"CMT\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"levelOfCharging\",\n                    \"name\": \"levelOfCharging\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"P1\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"remainingTimeForFullCharge\",\n                    \"name\": \"remainingTimeForFullCharge\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"SEC\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Mobility_Hub\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"electricVehicleChargingStation002\",\n            \"entity_name\": \"urn:ngsi-ld:Device:electricVehicleChargingStation002\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"distanceUltrasonic\",\n                    \"name\": \"distanceUltrasonic\",\n                    \"type\": \"Number\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"CMT\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"status\",\n                    \"name\": \"status\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"parkingPermit\": {\n                            \"type\": \"Property\",\n                            \"value\": \"yes\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"levelOfCharging\",\n                    \"name\": \"levelOfCharging\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"P1\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"remainingTimeForFullCharge\",\n                    \"name\": \"remainingTimeForFullCharge\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"SEC\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Mobility_Hub\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"particulateMatter001\",\n            \"entity_name\": \"urn:ngsi-ld:Device:particulateMatter001\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"commands\":[\n                {\n                    \"name\":\"level\",\n                    \"type\":\"command\"\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Mobility_Hub\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Register Basis",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"WeatherObserved:Basis:1\",\n            \"entity_name\": \"urn:ngsi-ld:WeatherObserved:Basis:1\",\n            \"entity_type\": \"WeatherObserved\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"temperature\",\n                    \"name\": \"temperature\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"CEL\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"relativeHumidity\",\n                    \"name\": \"relativeHumidity\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"P1\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"feelLikesTemperature\",\n                    \"name\": \"feelLikesTemperature\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"CEL\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Basis\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"WeatherObserved:Basis:2\",\n            \"entity_name\": \"urn:ngsi-ld:WeatherObserved:Basis:2\",\n            \"entity_type\": \"WeatherObserved\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"temperature\",\n                    \"name\": \"temperature\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"CEL\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"relativeHumidity\",\n                    \"name\": \"relativeHumidity\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"P1\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"feelLikesTemperature\",\n                    \"name\": \"feelLikesTemperature\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"CEL\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Basis\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Register Impress",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"LED002\",\n            \"entity_name\": \"urn:ngsi-ld:Device:LED002\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"commands\":[\n                {\n                    \"name\":\"on\",\n                    \"type\":\"command\"\n                },\n                {\n                    \"name\":\"off\",\n                    \"type\":\"command\"\n                },\n                {\n                    \"name\":\"mode\",\n                    \"type\":\"command\"\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Impress\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"weight001\",\n            \"entity_name\": \"urn:ngsi-ld:Device:weight001\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"weight\",\n                    \"name\": \"weight\",\n                    \"type\": \"Number\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"t\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"weightClass\",\n                    \"name\": \"weightClass\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"\"\n                        }\n                    }\n                },\n                {\n                    \"object_id\": \"price\",\n                    \"name\": \"price\",\n                    \"type\": \"Property\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"€/h\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Impress\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Register KI_Marketplace",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"LED003\",\n            \"entity_name\": \"urn:ngsi-ld:Device:LED003\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"commands\":[\n                {\n                    \"name\":\"on\",\n                    \"type\":\"command\"\n                },\n                {\n                    \"name\":\"off\",\n                    \"type\":\"command\"\n                },\n                {\n                    \"name\":\"simulation\",\n                    \"type\":\"command\"\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:KI_Marketplace\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Register Production_Claas",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"LED004\",\n            \"entity_name\": \"urn:ngsi-ld:Device:LED004\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"commands\":[\n                {\n                    \"name\":\"on\",\n                    \"type\":\"command\"\n                },\n                {\n                    \"name\":\"off\",\n                    \"type\":\"command\"\n                },\n                {\n                    \"name\":\"simulation\",\n                    \"type\":\"command\"\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Production_Claas\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Register Wind_Energy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"windmills001\",\n            \"entity_name\": \"urn:ngsi-ld:Device:windmills001\",\n            \"entity_type\": \"Device\",\n            \"protocol\":\"PDI-IoTA-JSON\",\n            \"transport\":\"MQTT\",\n            \"timezone\": \"Europe/Berlin\",\n            \"commands\":[\n                {\n                    \"name\":\"on\",\n                    \"type\":\"command\"\n                },\n                {\n                    \"name\":\"off\",\n                    \"type\":\"command\"\n                }\n                ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Wind_Energy\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"GreenEnergyGenerator:Wind_Energy:1\",\n            \"entity_name\": \"urn:ngsi-ld:GreenEnergyGenerator:Wind_Energy:1\",\n            \"entity_type\": \"GreenEnergyGenerator\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"maxEolicPowerGenerated\",\n                    \"name\": \"maxEolicPowerGenerated\",\n                    \"type\": \"Number\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"KWT\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"generationSources\",\n                    \"type\": \"Array\",\n                    \"value\": [\n                        \"solar\",\n                        \"eolic\"\n                    ]\n                },\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Wind_Energy\"\n                }\n            ]\n        },\n        {\n            \"device_id\": \"EnergyConsumer:Wind_Energy:1\",\n            \"entity_name\": \"urn:ngsi-ld:EnergyConsumer:Wind_Energy:1\",\n            \"entity_type\": \"EnergyConsumer\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"p\",\n                    \"name\": \"p\",\n                    \"type\": \"Number\",\n                    \"metadata\": {\n                        \"unitCode\": {\n                            \"type\": \"Text\",\n                            \"value\": \"KWT\"\n                        }\n                    }\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Wind_Energy\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Register Dokk1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"devices\": [\n        {\n            \"device_id\": \"OffStreetParking:Dokk1:1\",\n            \"entity_name\": \"urn:ngsi-ld:OffStreetParking:Dokk1:1\",\n            \"entity_type\": \"OffStreetParking\",\n            \"attributes\": [\n                {\n                    \"object_id\": \"availableSpotNumber\",\n                    \"name\": \"availableSpotNumber\",\n                    \"type\": \"Number\"\n                },\n                {\n                    \"object_id\": \"occupiedSpotNumber\",\n                    \"name\": \"occupiedSpotNumber\",\n                    \"type\": \"Number\"\n                }\n            ],\n            \"static_attributes\": [\n                {\n                    \"name\": \"totalSpotNumber\",\n                    \"type\": \"Property\",\n                    \"value\": 1000\n                },\n                {\n                    \"name\": \"category\",\n                    \"type\": \"Property\",\n                    \"value\": [\n                        \"parkingGarage\",\n                        \"public\",\n                        \"underground\"\n                    ]\n                },\n                {\n                    \"name\": \"controlledAsset\",\n                    \"type\": \"Relationship\",\n                    \"value\": \"urn:ngsi-ld:Building:Dokk1\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)\nmandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware\nof this convention. Furthermore the attribute name on the context data entity should match the short names found within\nthe associated `@context` file. These mappings can be defined at the service group level as seen in the previous\nrequest, ot they can be defined by provisioning each device individually.\n\nThree types of measurement attributes can be provisioned:\n\n-   `attributes` are mappings of the active readings from the device\n-   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement\n-   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the\n    context broker.\n\n> **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can\n> be defined within the provisioning service rather than individually.\nIn the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and\nmapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with\nappropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the\ndevice within the **Building** `urn:ngsi-ld:Building:barn001`\n"
					},
					"response": []
				},
				{
					"name": "Check Device",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						}
					},
					"response": []
				}
			],
			"description": "The IoT Agent acts as a middleware between the IoT devices and the context broker. It therefore needs to be able to\ncreate context data entities with unique IDs. Once a service has been provisioned and an unknown device makes a\nmeasurement the IoT Agent add this to the context using the standard `urn:ngsi-ld:` prefix, a default `type` and the\nsupplied `<device-id>` (unless the device is recognized and can be mapped to a known ID.\n\nIn the case of **NGSI-LD**, the definition of every attributes of each device entity should be made available in the\nsupplied `@context` file. The base **Device** Smart Data Model can be found\n[here](https://swagger.lab.fiware.org/?url=https://fiware.github.io/tutorials.NGSI-LD/swagger/device.yaml). To allow for\nthis discoverability and interoperability with third party systems, the IoT Agent must also be pre-supplied with a\n`IOTA_JSON_LD_CONTEXT` environment variable which hold the location of the `@context` file that is resent to the context\nbroker with every request.\n\nThere is no guarantee that every supplied IoT device `<device-id>` will always be unique, therefore all provisioning\nrequests to the IoT Agent require two mandatory headers:\n\n-   `fiware-service` header (equivalent to `NGSILD-Tenant`) is defined so that entities for a given service can be held\n    in a separate mongoDB database.\n-   `fiware-servicepath` can be used to differentiate between arrays of devices.\n\nNote that the **NGSI-LD** IoT Agents are backwardly compatible with **NGSI-v2** and therefore currently still use the\nnames of the older FIWARE headers for when provisioning.\n\nFor example within a smart city application you would expect different `fiware-service` headers for different\ndepartments (e.g. parks, transport, refuse collection etc.) and each `fiware-servicepath` would refer to specific park\nand so on. This would mean that data and devices for each service can be identified and separated as needed, but the\ndata would not be siloed - for example data from a **Smart Bin** within a park can be combined with the **GPS Unit** of\na refuse truck to alter the route of the truck in an efficient manner.\n\nThe **Smart Bin** and **GPS Unit** are likely to come from different manufacturers and it cannot be guaranteed that\nthere is no overlap within `<device-id>`s used. The use of the `fiware-service` and `fiware-servicepath` headers can\nensure that this is always the case, and allows the context broker to identify the original source of the context data.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Context Broker Commands",
			"item": [
				{
					"name": "Impress",
					"item": [
						{
							"name": "weight",
							"item": [
								{
									"name": "Check Weight",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:weight001?attrs=weight",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:weight001"
											],
											"query": [
												{
													"key": "attrs",
													"value": "weight"
												}
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "Check WeightClass",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:weight001?attrs=weightClass",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:weight001"
											],
											"query": [
												{
													"key": "attrs",
													"value": "weightClass"
												}
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "Check Price",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:weight001?attrs=price",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:weight001"
											],
											"query": [
												{
													"key": "attrs",
													"value": "price"
												}
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								}
							]
						},
						{
							"name": "LED",
							"item": [
								{
									"name": "LED on",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"\" \n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:LED002/attrs/on",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:LED002",
												"attrs",
												"on"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "LED on with Color",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"162,0,255\" \n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:LED002/attrs/on",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:LED002",
												"attrs",
												"on"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "LED off",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"\" \n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:LED002/attrs/off",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:LED002",
												"attrs",
												"off"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "LED mode",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"5\"\n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:LED002/attrs/mode",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:LED002",
												"attrs",
												"mode"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "LED on wrong command",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"1234\" \n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:LED002/attrs/on",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:LED002",
												"attrs",
												"on"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "Check LED",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:LED002",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:LED002"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Wind_Energy",
					"item": [
						{
							"name": "Windmills",
							"item": [
								{
									"name": "Windmills on",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"\" \n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:windmills001/attrs/on",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:windmills001",
												"attrs",
												"on"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "Windmills off",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"\" \n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:windmills001/attrs/off",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:windmills001",
												"attrs",
												"off"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "Windmills on wrong  command",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \"1234\" \n\n}"
										},
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:windmills001/attrs/on",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:windmills001",
												"attrs",
												"on"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								},
								{
									"name": "Check Windmills",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "NGSILD-Tenant",
												"value": "openiot"
											},
											{
												"key": "NGSILD-Path",
												"value": "/",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Link",
												"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:windmills001",
											"protocol": "http",
											"host": [
												"{{orion}}"
											],
											"path": [
												"ngsi-ld",
												"v1",
												"entities",
												"urn:ngsi-ld:Device:windmills001"
											]
										},
										"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "List Entities",
					"item": [
						{
							"name": "List Everything",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=Device,Building,ParkingSpot,WeatherObserved,GreenEnergyGenerator,EnergyConsumer,OffStreetParking",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "Device,Building,ParkingSpot,WeatherObserved,GreenEnergyGenerator,EnergyConsumer,OffStreetParking"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						},
						{
							"name": "List Devices",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=Device",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "Device"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						},
						{
							"name": "List Moduls (Buildings)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=Building",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "Building"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						},
						{
							"name": "List ParkingSpot",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=ParkingSpot",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "ParkingSpot"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						},
						{
							"name": "List OffStreetParking",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=OffStreetParking",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "OffStreetParking"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						},
						{
							"name": "List WeatherObserved",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=WeatherObserved",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "WeatherObserved"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						},
						{
							"name": "List GreenEnergyGenerator",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=GreenEnergyGenerator",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "GreenEnergyGenerator"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						},
						{
							"name": "List EnergyConsumer",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot"
									},
									{
										"key": "fiware-servicepath",
										"value": "/"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/ld+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=EnergyConsumer",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "EnergyConsumer"
										}
									]
								},
								"description": "This example returns the data of all `Store` entities within the context data"
							},
							"response": []
						}
					]
				}
			],
			"description": "Having connected up the IoT Agent to the IoT devices, the Orion Context Broker was informed that the commands are\nnow available. In other words the IoT Agent registered itself as a\n[Context Provider](https://github.com/FIWARE/tutorials.Context-Providers/) for the command attributes.\n\nOnce the commands have been registered it will be possible to ring the **Bell**, open and close the **Smart Door** and\nswitch the **Smart Lamp** on and off by sending requests to the Orion Context Broker, rather than sending UltraLight 2.0\nrequests directly t the IoT devices as we did in the [previous tutorial](https://github.com/Fiware/tutorials.IoT-Sensors)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "Impress (weight)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of all weight changes\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"Device\"}],\n  \"watchedAttributes\": [\"weight\"],\n  \"notification\": {\n    \"attributes\": [\"weight\", \"weightClass\", \"price\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ParkingSpot",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me if status of ParkingSpot has changed\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"ParkingSpot\"}],\n  \"watchedAttributes\": [\"status\"],\n  \"notification\": {\n    \"attributes\": [\"status\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "OffStreetParking",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me if availableSpotNumber of OffStreetParking has changed\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"OffStreetParking\"}],\n  \"watchedAttributes\": [\"availableSpotNumber\"],\n  \"notification\": {\n    \"attributes\": [\"availableSpotNumber\", \"occupiedSpotNumber\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ElectricVehicleChargingStation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me if distanceUltrasonic of ElectricVehicleChargingStation has changed\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"Device\"}],\n  \"watchedAttributes\": [\"distanceUltrasonic\"],\n  \"notification\": {\n    \"attributes\": [\"distanceUltrasonic\", \"status\", \"levelOfCharging\", \"remainingTimeForFullCharge\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GreenEnergyGenerator",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me if maxEolicPowerGenerated of GreenEnergyGenerator has changed\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"GreenEnergyGenerator\"}],\n  \"watchedAttributes\": [\"maxEolicPowerGenerated\"],\n  \"notification\": {\n    \"attributes\": [\"maxEolicPowerGenerated\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "EnergyConsumer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me if power (p) of EnergyConsumer has changed\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"EnergyConsumer\"}],\n  \"watchedAttributes\": [\"p\"],\n  \"notification\": {\n    \"attributes\": [\"p\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "WeatherObserved",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me if temperature of WeatherObserved has changed\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"WeatherObserved\"}],\n  \"watchedAttributes\": [\"temperature\"],\n  \"notification\": {\n    \"attributes\": [\"temperature\", \"relativeHumidity\", \"feelLikesTemperature\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check subscriptions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List last 10 temperature values Copy",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:WeatherObserved:Basis:1/attrs/temperature?lastN=10",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:WeatherObserved:Basis:1",
								"attrs",
								"temperature"
							],
							"query": [
								{
									"key": "lastN",
									"value": "10"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List last 10 ParkingSpot values",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:ParkingSpot:Mobility_Hub:1/attrs/status?lastN=10",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:ParkingSpot:Mobility_Hub:1",
								"attrs",
								"status"
							],
							"query": [
								{
									"key": "lastN",
									"value": "10"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "iot-agent",
			"value": "localhost:4041"
		},
		{
			"key": "orion",
			"value": "localhost:1026"
		},
		{
			"key": "ultralight",
			"value": "localhost:3001"
		},
		{
			"key": "ngsi-context.jsonld",
			"value": "http://context/ngsi-context.jsonld"
		},
		{
			"key": "quantumleap",
			"value": "localhost:8668"
		}
	]
}